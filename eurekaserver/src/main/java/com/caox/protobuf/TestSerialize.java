package com.caox.protobuf;

import com.google.protobuf.InvalidProtocolBufferException;

import java.io.*;
import java.util.List;

/**
 * @author : nazi
 * @version : 1.0
 * @date : 2019/8/13 19:57
 */
public class TestSerialize {
    public static void main(String[] args) throws IOException {

        // 按照定义的数据结构，创建一个Person
        PersonMsg.Person.Builder personBuilder = PersonMsg.Person.newBuilder();
        personBuilder.setId(1);
        personBuilder.setName("DEMO NAME");
        personBuilder.setEmail("xxg@163.com");
        personBuilder.addFriends("Friend A");
        personBuilder.addFriends("Friend B");
        personBuilder.addEmails("123@qq.com");
        personBuilder.addEmails("www@163.com");
        PersonMsg.Person xxg = personBuilder.build();

        // 将数据写到输出流，如网络输出流，这里就用ByteArrayOutputStream来代替
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        xxg.writeTo(output);

        // -------------- 分割线：上面是发送方，将数据序列化后发送 ---------------

        byte[] byteArray = output.toByteArray();

        // -------------- 分割线：下面是接收方，将数据接收后反序列化 ---------------

        // 接收到流并读取，如网络输入流，这里用ByteArrayInputStream来代替
        ByteArrayInputStream input = new ByteArrayInputStream(byteArray);

        // 反序列化
        PersonMsg.Person xxg2 = PersonMsg.Person.parseFrom(input);
        System.out.println("ID:" + xxg2.getId());
        System.out.println("name:" + xxg2.getName());
        System.out.println("email:" + xxg2.getEmail());
        System.out.println("friend:");
        List<String> friends = xxg2.getFriendsList();
        for(String friend : friends) {
            System.out.println(friend);
        }
        System.out.println("emails:");
        List<String> emails = xxg2.getEmailsList();
        for(String email :emails){
            System.out.println(email);
        }

        LogonRespMsg.LogonRespMessage.Builder logonRespBuilder = LogonRespMsg.LogonRespMessage.newBuilder();
        logonRespBuilder.setLogonResult(LogonRespMsg.LoginResult.LOGON_RESULT_SUCCESS);
        LogonRespMsg.UserInfo.Builder userInfo = LogonRespMsg.UserInfo.newBuilder();
        userInfo.setAcctID(200);
        userInfo.setName("Tester");
        userInfo.setStatus(LogonRespMsg.UserStatus.OFFLINE);
        logonRespBuilder.addUserInfos(userInfo.build());
        LogonRespMsg.LogonRespMessage logonResp = logonRespBuilder.build();
        int length = logonResp.getSerializedSize();
        System.out.println("The result length is " + length);
        byte[] buf = logonResp.toByteArray();
        try {
            LogonRespMsg.LogonRespMessage logonResp2 = LogonRespMsg.LogonRespMessage.parseFrom(buf);
            for(LogonRespMsg.UserInfo userInfo1 : logonResp2.getUserInfosList()){
                System.out.println("LogonResult = " + logonResp2.getLogonResult().toString() + " acctID = "
                        + userInfo1.getAcctID() + " name = " + userInfo1.getName() + " status = " + userInfo1.getStatus().toString());
            }

        } catch (InvalidProtocolBufferException e) {
            e.printStackTrace();
        }
        System.out.println("Reading data from local file generated by C++");

        try {
            LogonRespMsg.LogonRespMessage logonResp3 =
                    LogonRespMsg.LogonRespMessage.parseFrom(new FileInputStream("E:/protobuf/LogonRespMsg.dat"));
            for(LogonRespMsg.UserInfo userInfo1 : logonResp3.getUserInfosList()){
                System.out.println("LogonResult = " + logonResp3.getLogonResult().toString() + " acctID = "
                        + userInfo1.getAcctID() + " name = " + userInfo1.getName() + " status = " + userInfo1.getStatus().toString());
            }

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }





    }
}
